#! /usr/bin/env python
"""
Create an IETF WG repository for an I-D

Flags:
    --wg WGNAME
    --doc DOCNAME
    --editor GH_ID (can be repeated, must be at least once)
    --n name:pass Github login credentials
"""

import getopt, sys
import ietf_gh_utils as UTILS

# Set defaults
WGNAME = None
DOCNAME = None
EDITORS = []
NAMEPASS = None

# Parse JCL.
try:
    opts, args = getopt.getopt(sys.argv[1:], "hd:n:",
                              ["help", "doc=", "np="])
except getopt.GetoptError as err:
    print str(err)
    raise SystemExit
if args or len(args) != 0:
    raise SystemExit("Usage error; try --help for help");
for o,a in opts:
    if o in ('-h', '--help'):
        print __doc__
        raise SystemExit
    if o in ("-w", "--wg"):
        WGNAME = a
    elif o in ("-d", "--doc"):
        DOCNAME = a
    elif o in ("-n", "--np"):
        NAMEPASS = a
    else:
        assert False, "Unhandled option: " + o

# Login
G,USER = UTILS.gh_login(NAMEPASS)

# For individual draft, the WGNAME is the USER name
WGNAME = USER
EDITORS = [ USER ]

# Verify flag syntax.
if not WGNAME:
    raise SystemExit("-w/--wg flag required; use -h for help")
if not DOCNAME:
    raise SystemExit("-d/--doc flag required; use -h for help")
if len(EDITORS) == 0:
    raise SystemExit( "-e/--editor flag required; use -h for help")

# Fix doc name: remove draft- ietf- $WGNAME- from front
while True:
    for prefix in ( 'draft-', 'ietf-', WGNAME+'-'):
        found = False
        if DOCNAME.startswith(prefix):
            DOCNAME = DOCNAME[len(prefix):]
            found = True
    if not found:
        break
if len(DOCNAME) == 0:
    raise SystemExit("Docname is all prefixes!")

# Verify user names
if not UTILS.verify_users(G, EDITORS):
    raise SystemExit("Missing GH accounts");

# See if organization exists.
WGNAME = UTILS.fix_wg_name(WGNAME)
DOC="draft-" + WGNAME + "-" + DOCNAME
ORG = USER
#if not UTILS.org_exists(G, ORG):
#    raise SystemExit("Organization not found; try mk-ietf-wg")
#o = G.get_organization(ORG)

# Create an editors team and populate it
#editors = o.create_team(DOC, privacy='closed')
#editors.add_membership(G.get_user(USER))
#done = [ USER ]
#for e in EDITORS:
#    if e not in done:
#        editors.add_membership(G.get_user(e))
#        done += [ e ]
# Add the "owners" people?

# Create repository draft-$WGNAME-$DOCNAME
u = G.get_user()
repo = u.create_repo(DOC,
        description="Repository for " + DOC + " draft",
        )

# Remove pre-populated labels, add ours.
for label in repo.get_labels():
    label.delete()
repo.create_label("editorial", "41d366")
repo.create_label("design", "1d76db")
repo.create_label("parked", "f9d0c4")

# Create template files
with open("CONTRIBUTING.md", "w") as F:
    text = open("contributing.txt").read()
    F.write(text % vars())
with open("draft-%(WGNAME)s-%(DOCNAME)s.md" % vars(), "w") as F:
    F.write("""---
docname: draft-%(WGNAME)s-%(DOCNAME)s-latest
title: The %(DOCNAME)s draft
date: {DATE}

workgroup: %(WGNAME)s
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

--- abstract

Content here.
""" % vars())


print """Run the following commands:
    git clone https://github.com/%(ORG)s/%(DOC)s
    cd %(DOC)s
    git remote set-url origin git@github.com:/%(WGNAME)s/%(DOC)s
    cp ../CONTRIBUTING.md .
    git add CONTRIBUTING.md
    # If you need an empty draft:
    cp ../draft-%(WGNAME)s-%(DOCNAME)s.md .
    git add %(DOC)s.md
    git commit -m 'Initial docs' .
    git push
    git clone https://github.com/martinthomson/i-d-template lib
    # MAKE SURE YOU HAVE kramdown ETC INSTALLED!
    # (See https://github.com/martinthomson/i-d-template/blob/master/doc/SETUP.md)
    make -f lib/setup.mk
    git push
""" % vars()
