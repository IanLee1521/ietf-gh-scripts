#! /usr/bin/env python
"""
Create an IETF WG repository for an I-D

Flags:
    --wg WGNAME
    --doc DOCNAME
    --editor GH_ID (can be repeated, must be at least once)
    --n name:pass Github login credentials
"""

import getopt, sys
import ietf_gh_utils as UTILS

# Set defaults
WGNAME = None
DOCNAME = None
EDITORS = []
NAMEPASS = None

# Parse JCL.
try:
    opts, args = getopt.getopt(sys.argv[1:], "hw:d:e:n:",
                              ["help", "wg=", "doc=", "editor=", "np="])
except getopt.GetoptError as err:
    print str(err)
    raise SystemExit
if args or len(args) != 0:
    raise SystemExit("Usage error; try --help for help");
for o,a in opts:
    if o in ('-h', '--help'):
        print __doc__
        raise SystemExit
    if o in ("-w", "--wg"):
        WGNAME = a
    elif o in ("-d", "--doc"):
        DOCNAME = a
    elif o in ("-e", "--editor"):
        EDITORS += [ a ]
    elif o in ("-n", "--np"):
        NAMEPASS = a
    else:
        assert False, "Unhandled option: " + o

# Verify flag syntax.
if not WGNAME:
    raise SystemExit("-w/--wg flag required; use -h for help")
if not DOCNAME:
    raise SystemExit("-d/--doc flag required; use -h for help")
if len(EDITORS) == 0:
    raise SystemExit( "-e/--editor flag required; use -h for help")

# Fix doc name: remove draft- ietf- $WGNAME- from front
while True:
    for prefix in ( 'draft-', 'ietf-', WGNAME+'-'):
        found = False
        if DOCNAME.startswith(prefix):
            DOCNAME = DOCNAME[len(prefix):]
            found = True
    if not found:
        break
if len(DOCNAME) == 0:
    raise SystemExit("Docname is all prefixes!")

# Login
G,USER = UTILS.gh_login(NAMEPASS)

# Verify user names
if not UTILS.verify_users(G, EDITORS):
    raise SystemExit("Missing GH accounts");

# See if organization exists.
WGNAME = UTILS.fix_wg_name(WGNAME)
DOC="draft-" + WGNAME + "-" + DOCNAME
ORG = 'ietf-wg-' + WGNAME
if not UTILS.org_exists(G, ORG):
    raise SystemExit("Organization not found; try mk-ietf-wg")
o = G.get_organization(ORG)

# Create an editors team and populate it
editors = o.create_team(DOC)
editors.add_membership(G.get_user(USER))
done = [ USER ]
for e in EDITORS:
    if e not in done:
        editors.add_membership(G.get_user(e))
        done += [ e ]
# Add the "owners" people?

# Create repository draft-$WGNAME-$DOCNAME
repo = o.create_repo(DOC,
        description="Repository for " + DOC + " draft",
        has_issues=True, # Probably the default, but this is funny
        team_id=editors.id
        )

# Remove pre-populated labels, add ours.
for label in repo.get_labels():
    label.delete()
repo.create_label("editorial", "41d366")
repo.create_label("design", "1d76db")
repo.create_label("parked", "f9d0c4")

print """Run the following commands:
    cd ...somewhere else...
    git clone https://github.com/%(ORG)s/%(DOC)s
    cd %(DOC)s
    echo Empty draft >draft-%(DOC)s.md
    git add draft-%(DOC)s.md
    git commit -m 'Empty draft' draft-%(DOC).md
    git push
    git clone https://github.com/martinthomson/i-d-template lib
    make -f lib/setup.mk
    git push
""" % vars()
